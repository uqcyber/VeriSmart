include "EVM.Vale.Common.vaf"

module EVM.Vale.Ins_SwapDup

#verbatim{:interface}
open FStar.Seq 
open EVM.Machine_Basic
open EVM.Vale.Decls
open EVM.State
open EVM.Vale.Common
#endverbatim

#verbatim
open EVM.Machine_Basic
open EVM.Vale.Decls
friend EVM.Vale.Decls
module S = EVM.Semantics_s
#reset-options "--initial_fuel 0 --initial_ifuel 0 --max_fuel 2 --max_ifuel 2 --z3rlimit 300" 
// #reset-options "--initial_fuel 60 --initial_ifuel 60 --max_fuel 60 --z3rlimit 300" // Unsure if these are what I want
#endverbatim

#token :: precedence + 
#token ^= precedence = 
#token \ precedence *

procedure DUP1()
  {:public}
  {:instruction Ins(S.Dup(1))}
  reads
    status;
  modifies
    stack; 
  requires  
    status == ACTIVE ==> not_empty(stack); 
    status == ACTIVE ==> not_full(stack);
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(stack[0] :: stack)
    );
    inactive_state_unchanged(old(this), this);
{
}

procedure DUP2()
  {:public}
  {:instruction Ins(S.Dup(2))}
  reads
    status;
  modifies
    stack; 
  requires  
    status == ACTIVE ==> 1 < len(stack); 
    status == ACTIVE ==> not_full(stack);
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(stack[1] :: stack)
    );
    inactive_state_unchanged(old(this), this);
{
}

procedure DUP3()
  {:public}
  {:instruction Ins(S.Dup(3))}
  reads
    status;
  modifies
    stack; 
  requires  
    status == ACTIVE ==> 2 < len(stack); 
    status == ACTIVE ==> not_full(stack);
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(stack[2] :: stack)
    );
    inactive_state_unchanged(old(this), this);
{
}

procedure DUP4()
  {:public}
  {:instruction Ins(S.Dup(4))}
  reads
    status;
  modifies
    stack; 
  requires  
    status == ACTIVE ==> 3 < len(stack); 
    status == ACTIVE ==> not_full(stack);
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(stack[3] :: stack)
    );  
    inactive_state_unchanged(old(this), this);
{
}

procedure SWAP1()
  {:public}
  {:instruction Ins(S.Swap(1))}
  reads
    status;
  modifies
    stack; 
  requires  
    status == ACTIVE ==> 1 < len(stack); 
  ensures
    old(status) == ACTIVE ==> (
      len(stack) == len(old(stack)) &&
      slce(stack, 2, len(stack)) ^= old(slce(stack, 2, len(stack))) &&
      stack[0] == old(stack[1]) &&
      stack[1] == old(stack[0]) 
    );  
    inactive_state_unchanged(old(this), this);
{
}

procedure SWAP2()
  {:public}
  {:instruction Ins(S.Swap(2))}
  reads
    status;
  modifies
    stack; 
  requires  
    status == ACTIVE ==> 2 < len(stack); 
  ensures
    old(status) == ACTIVE ==> (
      len(stack) == len(old(stack)) &&
      stack[1] == old(stack[1]) &&
      slce(stack, 3, len(stack)) ^= old(slce(stack, 3, len(stack))) &&
      stack[0] == old(stack[2]) &&
      stack[2] == old(stack[0])
    );  
    inactive_state_unchanged(old(this), this);
{
}

procedure SWAP3()
  {:public}
  {:instruction Ins(S.Swap(3))}
  reads
    status;
  modifies
    stack; 
  requires  
    status == ACTIVE ==> 3 < len(stack); 
  ensures
    old(status) == ACTIVE ==> (
      len(stack) == len(old(stack)) &&
      slce(old(stack),1, 3) ^= slce(stack, 1, 3) &&
      slce(stack, 4, len(stack)) ^= slce(old(stack), 4, len(old(stack))) &&
      stack[0] == old(stack[3]) &&
      stack[3] == old(stack[0]) 
    );
    inactive_state_unchanged(old(this), this);
{
}

procedure SWAP4()
  {:public}
  {:instruction Ins(S.Swap(4))}
  reads
    status;
  modifies
    stack; 
  requires  
    status == ACTIVE ==> 4 < len(stack); 
  ensures
    old(status) == ACTIVE ==> (
      len(stack) == len(old(stack)) &&
      slce(old(stack),1, 4) ^= slce(stack, 1, 4) &&
      slce(stack, 5, len(stack)) ^= slce(old(stack), 5, len(old(stack))) &&
      stack[0] == old(stack[4]) &&
      stack[4] == old(stack[0]) 
    );
    inactive_state_unchanged(old(this), this);
{
}

// Performs DUP2 twice
procedure DoubleDUP2() 
  {:public}
  reads
    status;
  modifies 
    stack;
  requires 
    status == ACTIVE ==> len(stack) < 1023;
    status == ACTIVE ==> 2 <= len(stack);
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(stack[0]::(stack[1]::stack))
    );
    inactive_state_unchanged(old(this), this);
{
  DUP2();
  DUP2();
}    