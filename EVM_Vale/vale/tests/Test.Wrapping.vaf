
include "../EVM.Vale.Common.vaf"
include "../EVM.Vale.Ins_Basic.vaf"

module Test.Wrapping

#verbatim{:interface}{:implementation}
open EVM.Machine_Basic
open EVM.Vale.Decls
open EVM.Vale.Common
open EVM.Vale.Ins_Basic
open EVM.State
#endverbatim

#verbatim{:implementation}
friend EVM.Vale.Decls 
#endverbatim

#token :: precedence + 
#token ^= precedence = 
#token \ precedence *

#verbatim
#restart-solver
#push-options "--initial_fuel 60 --initial_ifuel 60 --max_fuel 60 --z3rlimit 300 --z3cliopt smt.arith.nl=true"
#endverbatim

procedure TestAddWrapNoWrapping()
  reads
    status;
  modifies
    stack;
  requires
    status == ACTIVE ==> len(stack) < 1000;
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(3::stack)
    );
    inactive_state_unchanged(old(this), this);
{
  PUSH(1);
  PUSH(2);
  ADD_WRAP();
}

procedure TestAddWrapWrapping()
  reads
    status;
  modifies
    stack;
  requires
    status == ACTIVE ==> len(stack) < 1000;
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(0::stack)
    );
    inactive_state_unchanged(old(this), this);
{
  PUSH(pow2_256 - 1);
  PUSH(1);
  ADD_WRAP();
}

procedure TestSubWrapNoWrapping()
  reads
    status;
  modifies
    stack;
  requires
    status == ACTIVE ==> len(stack) < 1000;
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(1::stack)
    );
    inactive_state_unchanged(old(this), this);
{
  PUSH(1);
  PUSH(2);
  SUB_WRAP();
}

procedure TestSubWrapWrapping()
  reads
    status;
  modifies
    stack;
  requires
    status == ACTIVE ==> len(stack) < 1000;
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old((pow2_256 - 1)::stack)
    );
    inactive_state_unchanged(old(this), this);
{
  PUSH(1);
  PUSH(0);
  SUB_WRAP();
}

procedure TestMulWrapNoWrapping()
  reads
    status;
  modifies
    stack;
  requires
    status == ACTIVE ==> len(stack) < 1000;
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(6::stack)
    );
    inactive_state_unchanged(old(this), this);
{
  PUSH(2);
  PUSH(3);
  MUL_WRAP();
}

#verbatim{:interface}
let pow2_254 = 0x8000000000000000000000000000000000000000000000000000000000000000
#endverbatim
const pow2_254:nat256 extern;

procedure TestMulWrapWrapping()
  reads
    status;
  modifies
    stack;
  requires
    status == ACTIVE ==> len(stack) < 1000;
  ensures
    old(status) == ACTIVE ==> (
      stack ^= old(0::stack)
    );
    inactive_state_unchanged(old(this), this);
{
  PUSH(pow2_254); // pow2_256 / 2
  PUSH(2);
  MUL_WRAP();
}

#verbatim
#reset-options
#endverbatim