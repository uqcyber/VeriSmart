include "../EVM.Vale.Ins_Basic.vaf"
include "../EVM.Vale.Common.vaf"
include "EVM.Vale.Tools.vaf"

module EVM.Vale.Casino_dep

#verbatim{:interface}{:implementation}
open FStar.Seq 
open FStar.Seq.Base
open FStar.Seq.Properties
open EVM.Machine_Basic
open EVM.Vale.Decls
open EVM.Vale.Ins_Basic
open EVM.Vale.Tools
open EVM.Vale.Common
open EVM.State
#endverbatim

#verbatim{:implementation}
friend EVM.Vale.Decls // THIS IS CRITICAL TO REASONING!
#endverbatim

#token :: precedence + 
#token ^= precedence =  
#token \ precedence *

#verbatim{:interface}
let casino_state:nat256 = 0
let timeout:nat256 = 1
let pot:nat256 = 2
let operator_address:nat256 = 3
let secret_number:nat256 = 4
let wager_value:nat256 =  5
let wager_guess:nat256 = 6
let wager_timestamp:nat256 = 7
let player_address:nat256 = 8
let result_coin:nat256 = 9
let contract_address:nat256 = 10


let idle:nat256 = 0
let game_available:nat256 = 1
let bet_placed:nat256 = 2
let head:nat256 = 0
let tail:nat256 = 1
let default_timeout:nat256 = 1800
#endverbatim


const casino_state:nat256 extern;
const timeout:nat256 extern;
const pot:nat256 extern;
const operator_address:nat256 extern;
const secret_number:nat256 extern;
const wager_value:nat256 extern;
const wager_guess:nat256 extern;
const wager_timestamp:nat256 extern;
const player_address:nat256 extern;
const result_coin:nat256 extern;
const contract_address:nat256 extern;

const idle:nat256 extern;
const game_available:nat256 extern;
const bet_placed:nat256 extern;
const default_timeout:nat256 extern;




procedure payable() 
    {:public}
    lets
        contract_address' := 10;
        receiver_address := old(stor[contract_address]) % pow2_160;
        new_sender_balance:nat256 := if 0 < #nat256(old(bal[sender % pow2_160]) - value) then #nat256(old(bal[sender % pow2_160]) - value) else 0;
    reads
        sender;
        value;
        status;
        stor;
    modifies
        bal;
    requires
        status == ACTIVE ==> stor[contract_address'] < pow2_160;
        status == ACTIVE ==> value <= bal[sender % pow2_160];
        status == ACTIVE ==> bal[receiver_address] + value < pow2_256;
    ensures
        old(status == ACTIVE ==> bal == bal[sender % pow2_160 := new_sender_balance][receiver_address := #nat256(bal[receiver_address] + value)]);
        inactive_state_unchanged(old(this), this);
 
{
    assume status == ACTIVE ==> bal == old(bal[sender % pow2_160 := new_sender_balance][receiver_address := #nat256(bal[receiver_address] + value)]);
}

procedure byOperator() 
    {:public}
    lets
        operator_address' := 3;
    reads
        hdStkZero;
        sender;
        stor;
    modifies
        return_data;
        stack;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1023;
    ensures
        old(status == ACTIVE && sender == stor[operator_address']) ==> (
            stack ^= old(stack) &&
            status == old(status) &&
            return_data == old(return_data)
        );
        old(status == ACTIVE && sender != stor[operator_address']) ==> (
            stack ^= old(stack) &&
            status == END_INVALID &&
            option_is_none(return_data) 
        );
        inactive_state_unchanged(old(this), this);
{
    CALLER();
    sload_value(operator_address);
    EQ();
    if (hdStkZero == 1) {
        INVALID();
    }
}



procedure costs(inline _value:nat256) 
    {:public}
    reads
        hdStkZero;
        value;
    modifies
        return_data;
        status;
        stack;
    requires
        status == ACTIVE ==> len(stack) < 1023;
    ensures
        old(status) == ACTIVE && value == _value ==> (
            status == old(status) &&
            stack ^= old(stack) &&
            return_data == old(return_data) 
        );
        old(status) == ACTIVE && value != _value ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    PUSH(_value);
    CALLVALUE();
    EQ();
    if (hdStkZero == 1) {
        INVALID();
    }
}

procedure inState(inline _state:nat256) 
    {:public}
    lets
        casino_state' := 0;
    reads
        hdStkZero;
        stor;
    modifies
        return_data;
        status;
        stack;
    requires
        status == ACTIVE ==> len(stack) < 1023;
    ensures
        old(status == ACTIVE && stor[casino_state'] == _state) ==> (
            status == old(status) &&
            stack ^= old(stack) &&
            return_data == old(return_data) 
        );

        old(status == ACTIVE && stor[casino_state'] != _state) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    PUSH(_state);
    sload_value(casino_state);
    EQ();
    if (hdStkZero == 1) {
        INVALID();
    }
}


#verbatim
#restart-solver
#push-options "--initial_fuel 2 --initial_ifuel 2 --max_fuel 2 --z3rlimit 30"
#endverbatim
procedure validValue(inline _value:nat256) 
    {:public}
    lets
        pot' := 2;
    reads
        hdStkZero;
        stor;
    modifies
        return_data;
        status;
        stack;
    requires
        status == ACTIVE ==> len(stack) < 1023;
    ensures
        old(status == ACTIVE && 0 < _value <= stor[pot']) ==> (
            status == old(status) &&
            stack ^= old(stack) &&
            return_data == old(return_data) 
        );
        old(status == ACTIVE && (_value <= 0 || _value > stor[pot'])) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{

    PUSH(0);
    PUSH(_value);
    GT();

    if (hdStkZero == 1) {
        INVALID();
    } else {
        PUSH(_value);
        sload_value(pot);
        LT();

        if (hdStkZero == 0) {
            INVALID();
        }
    }
}


#verbatim
#restart-solver
#push-options "--initial_fuel 60 --initial_ifuel 60 --max_fuel 60 --z3rlimit 300"
#endverbatim

procedure noActiveBet() 
    {:public}
    lets
        casino_state' := 0;
        idle' := 0;
        game_available' := 1;
    reads
        hdStkZero;
        stor;
    modifies
        return_data;
        stack;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1022;
    ensures
        old(status == ACTIVE && (stor[casino_state'] == idle' || stor[casino_state'] == game_available')) ==> (
            status == old(status) &&
            stack ^= old(stack) &&
            return_data == old(return_data)
        );
        old(status == ACTIVE && (stor[casino_state'] != idle' && stor[casino_state'] != game_available')) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{

    sload_value(casino_state);
    PUSH(idle);
    EQ();

    let isidle := if stor[casino_state'] = idle' then 1 else 0;
    assert status == ACTIVE ==> stack ^= old(isidle::stack);

    sload_value(casino_state);
    PUSH(game_available);
    EQ();

    let isavailable := if stor[casino_state'] = game_available' then 1 else 0;
    assert status == ACTIVE ==> stack ^= old(isavailable::(isidle::stack));

    assert isavailable + isidle > 0 ==> old(stor[casino_state'] == idle' || stor[casino_state'] == game_available');
    ADD();

    if (hdStkZero == 1) {
        assert old(status == ACTIVE ==> (stor[casino_state'] != idle' && stor[casino_state'] != game_available'));
        INVALID();
    }
}
