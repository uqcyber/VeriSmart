include "../EVM.Vale.Common.vaf"
include "../EVM.Vale.Ins_Basic.vaf"
include "EVM.Vale.Tools.vaf"
include "EVM.Vale.Casino_dep.vaf"
include "EVM.Vale.Casino_safe.vaf"
include "../SafeMath.vaf"
include "EVM.Vale.Overflow.vaf"


module EVM.Vale.Casino

#verbatim{:interface}{:implementation}
open FStar.Seq 
open FStar.Seq.Base
open FStar.Seq.Properties
open EVM.Machine_Basic
open EVM.Vale.Decls
open EVM.Vale.Ins_Basic
open EVM.Vale.Tools
open EVM.Vale.Casino_dep
open EVM.Vale.Casino_safe
open EVM.Vale.Common
open EVM.Vale.Overflow
open EVM.State
open SafeMath
#endverbatim

#verbatim{:implementation}
friend EVM.Vale.Decls // THIS IS CRITICAL TO REASONING!
#endverbatim

#token :: precedence + 
#token ^= precedence = 
#token \ precedence *

procedure CasinoConstructor(inline _contract_address:nat256)
    {:public}
    lets 
        casino_state' := 0; 
        timeout' := 1;
        pot' := 2;
        operator_address' := 3;
        wager_value' := 5;
        wager_timestamp' := 7;
        player_address' := 8;
        contract_address' := 10;

        idle' := 0;
        bet_placed' := 2;
    reads
        sender;
        bal;
        status;
        actor;
        timeStamp;
    modifies
        stack; 
        stor;
    requires
        status == ACTIVE ==> len(stack) < 1023;
        status == ACTIVE ==> _contract_address != 0;
        status == ACTIVE ==> _contract_address != sender;
        status == ACTIVE ==> bal[_contract_address % pow2_160] == 0;
        status == ACTIVE ==> _contract_address == actor;
        status == ACTIVE ==> _contract_address < pow2_160;
    ensures
        old(status) == ACTIVE ==> stack ^= old(stack);
        old(status) == ACTIVE ==> stor == old(stor [contract_address' := _contract_address] [casino_state' := idle'] [timeout' := 1800] [pot' := 0] [operator_address' := sender] [player_address' := 0] [wager_timestamp' := 0]);
        old(status) == ACTIVE ==> bal[stor[contract_address'] % pow2_160] == 0;
        // invariant
        old(status) == ACTIVE ==> ( 
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160 &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
        inactive_state_unchanged(old(this), this);
{
    sstore_value(contract_address, _contract_address);
    sstore_value(casino_state, idle);
    sstore_value(timeout, default_timeout);
    sstore_value(pot, 0);
    sstore_caller(operator_address);
    sstore_value(player_address, 0);
    sstore_value(wager_timestamp, 0); 
}

#verbatim
#restart-solver
#push-options "--initial_fuel 60 --initial_ifuel 60 --max_fuel 60 --z3rlimit 300"
#endverbatim

procedure removeFromPot(inline _value:nat256)
    {:public}
    lets 
        casino_state' := 0;
        pot' := 2;
        operator_address' := 3;
        wager_value' := 5;
        wager_timestamp' := 7;
        player_address' := 8;
        contract_address' := 10;

        idle' := 0;
        game_available' := 1;
        bet_placed' := 2;

        sender_address := stor[contract_address'] % pow2_160;
        receiver_address := sender % pow2_160;
        new_sender_balance:nat256 := if _value < bal[sender_address] then #nat256(bal[sender_address] - _value) else 0;
    reads
        hdStkZero;
        sender;
        actor;
        timeStamp;
    modifies
        return_data;
        stack; 
        stor;
        bal;
        status;
    requires
        status == ACTIVE ==> len(old(stack)) < 1022;
        // invariants
        status == ACTIVE ==> ( 
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160  &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
    ensures
        old(status == ACTIVE && (sender == stor[operator_address'] && 
        (stor[casino_state'] == idle' || stor[casino_state'] == game_available') &&
         0 < _value <= stor[pot'] && bal[receiver_address] + _value < pow2_256)) ==> (
            stack ^= old(stack) &&
            return_data == old(return_data) &&
            status == old(status) &&
            stor == old(stor[pot' := #nat256(stor[pot'] - _value)]) &&
            bal == old(bal[sender_address := new_sender_balance][receiver_address := #nat256(bal[receiver_address] + _value)]) &&
            // invariant
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160 &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
        old(status == ACTIVE && (sender != stor[operator_address'] || 
        (stor[casino_state'] != idle' && stor[casino_state'] != game_available') ||
        _value <= 0 || _value > stor[pot'] || bal[receiver_address] + _value >= pow2_256)) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    CALLER();
    BALANCE();
    PUSH(_value);
    overflowCheck();

    // assert status == ACTIVE ==> old(bal[receiver_address] + _value < pow2_256);

    byOperator();
    noActiveBet();
    validValue(_value);
    removeFromPotSafe(_value);
}



procedure createGame(inline _secret_number:nat256)
    {:public}
    lets 
        casino_state' := 0;
        pot' := 2;
        operator_address' := 3;
        secret_number' := 4;
        wager_value' := 5;
        wager_timestamp' := 7;
        player_address' := 8;
        contract_address' := 10;

        idle' := 0;
        game_available' := 1;
        bet_placed' := 2;
    reads
        hdStkZero;
        sender;
        bal;
        actor;
        timeStamp;
    modifies
        return_data;
        stack; 
        stor;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1022;
        // invariants
        status == ACTIVE ==> ( 
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160  &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
    ensures
        old(status == ACTIVE && (stor[casino_state'] == idle' && sender == stor[operator_address'])) ==> ( 
            stack ^= old(stack) &&
            return_data == old(return_data) &&
            status == old(status) &&
            stor == old(stor[secret_number' := _secret_number][casino_state' := game_available']) &&
            // invariant
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160 &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
        old(status == ACTIVE && (stor[casino_state'] != idle' || sender != stor[operator_address'])) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    inState(idle);
    byOperator();

    createGameSafe(_secret_number);
}

procedure placeBet(inline _value:nat256, inline _guess:nat256)
    lets 
        casino_state' := 0;
        pot' := 2;
        operator_address' := 3;
        wager_value' := 5;
        wager_guess' := 6;   
        wager_timestamp' := 7;
        player_address' := 8;
        contract_address' := 10;

        game_available' := 1;
        bet_placed' := 2;

        receiver_address := stor[contract_address'] % pow2_160;
        new_sender_balance:nat256 := if value < bal[sender % pow2_160] then #nat256(bal[sender % pow2_160] - value) else 0;
    reads
        sender;
        value;
        timeStamp;
        hdStkZero;
        actor;
    modifies
        return_data;
        stack; 
        stor;
        bal;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1021;
        // Must be true after a successful call of this function
        status == ACTIVE ==> _value <= bal[sender % pow2_160];
        // invariants
        status == ACTIVE ==> ( 
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160  &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
    ensures
        old(status == ACTIVE && (sender != stor[operator_address'] && _value == value && stor[casino_state'] == game_available' &&
         0 < _value <= stor[pot'] && bal[receiver_address] + value < pow2_256)) ==> (
            stack ^= old(stack) &&
            return_data == old(return_data) &&
            status == old(status) &&
            stor == old(stor[casino_state' := bet_placed'][wager_value' := _value][wager_timestamp' := timeStamp][player_address' := sender]) &&
            bal == old(bal[sender % pow2_160 := new_sender_balance][receiver_address := #nat256(bal[receiver_address] + value)]) && 
            // invariant
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160 &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
        old(status == ACTIVE && (sender == stor[operator_address'] || _value != value || stor[casino_state'] != game_available' ||
        _value <= 0 || _value > stor[pot'] || bal[receiver_address] + value >= pow2_256)) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    sload_value(contract_address);
    BALANCE();
    CALLVALUE();
    overflowCheck();

    inState(game_available);
    costs(_value);
    validValue(_value);

    CALLER();
    sload_value(operator_address);
    EQ();

    if (hdStkZero == 0) {
        INVALID();
    } else {
        placeBetSafe(_value, _guess);
    }
}

procedure decideBet(inline publicNumber:nat256)
    {:public}
    lets
        casino_state' := 0;
        timeout' := 1;
        pot' := 2;
        operator_address' := 3;
        secret_number' := 4;
        wager_value' := 5;
        wager_guess' := 6;
        wager_timestamp' := 7;
        player_address' := 8;
        contract_address' := 10;

        idle' := 0;
        bet_placed' := 2;
        
        guess := old(stor[wager_guess']) % 2;
        secret := publicNumber % 2;

        price := stor[wager_value'] * 2;
        receiver_address := stor[player_address'] % pow2_160;
        sender_address := stor[contract_address'] % pow2_160;
     reads
        hdStkZero;
        sender;
        actor;
        timeStamp;
    modifies
        return_data;
        stack; 
        stor;
        bal;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1018; 
        // invariants
        status == ACTIVE ==> ( 
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160  &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
    ensures 
        old(status == ACTIVE && (stor[casino_state'] == bet_placed' && sender == stor[operator_address'] &&
         Keccak.keccak(publicNumber) == stor[secret_number'] && stor[pot'] + stor[wager_value'] < pow2_256 &&
         bal[receiver_address] + price < pow2_256)) ==> ( 
            stack ^= old(stack) &&
            // return_data == old(return_data) &&
            status == old(status) &&
            (
                ( guess == secret ==> 
                    stor == old(stor [pot' := #nat256(stor[pot'] - stor[wager_value'])] [wager_value' := 0] [casino_state' := idle']) &&
                    bal ==  old(bal [sender_address := #nat256(bal[sender_address] - price)] [receiver_address := #nat256(bal[receiver_address] + price)])
                ) &&
                (guess != secret ==> 
                    stor == old(stor[pot' := #nat256(stor[pot'] + stor[wager_value'])][wager_value' := 0] [casino_state' := idle'])
                )
            ) &&
            // invariant
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160 &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
        old(status == ACTIVE && (stor[casino_state'] != bet_placed' || sender != stor[operator_address'] ||
         Keccak.keccak(publicNumber) != stor[secret_number'] || stor[pot'] + stor[wager_value'] >= pow2_256 ||
         bal[receiver_address] + price >= pow2_256)) ==> (
            status == END_INVALID &&
            // stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    sload_value(pot);
    sload_value(wager_value);
    overflowCheck();
        
    sload_value(player_address);
    BALANCE();

    sload_value(wager_value);
    sload_value(wager_value);
    SafeAdd();
    assert status == ACTIVE ==> stack[0] == price;

    overflowCheck();

    assert status == ACTIVE ==> bal[receiver_address] + price < pow2_256;
    assert status == ACTIVE ==> stack ^= old(stack);



    inState(bet_placed);
    byOperator();


    PUSH(publicNumber);
    KECCAK256();
    sload_value(secret_number);
    EQ();
    
    if (hdStkZero == 1) {
        INVALID();
    } else {
        decideBetSafe(publicNumber);
    }
}


procedure closeCasino()
    {:public}
    lets 
        casino_state' := 0;
        pot' := 2;
        operator_address' := 3;
        wager_value' := 5;
        wager_timestamp' :=7;
        player_address' := 8;
        contract_address' := 10;
        owner := stor[operator_address'] % pow2_160;

        idle' := 0;
        bet_placed' := 2;
    reads 
        sender;
        actor;
        hdStkZero;
        stor;
        timeStamp;
    modifies
        stack;
        bal;
        status;
        return_data;
    requires
        status == ACTIVE ==> len(stack) < 1022;
        // invariants
        status == ACTIVE ==> ( 
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160  &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
        
    ensures
        old(status) == ACTIVE && stor[casino_state'] == idle' && sender == stor[operator_address'] && bal[actor] + bal[owner] < pow2_256 ==> (
            bal == old(bal[actor := 0] [owner := (bal[actor] + bal[owner]) % pow2_256]) &&
            stack ^= old(stack) &&
            status == END_SELFDESTRUCT 
        );
        old(status) == ACTIVE && (stor[casino_state'] != idle' || sender != stor[operator_address'] || bal[actor] + bal[owner] >= pow2_256) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data) 
        );
        
        inactive_state_unchanged(old(this), this);
{
    ADDRESS();
    BALANCE();
    sload_value(operator_address);
    BALANCE();
    overflowCheck();



    inState(idle);
    byOperator();
    closeCasinoSafe();
}

#verbatim
#restart-solver
#push-options "--initial_fuel 60 --initial_ifuel 60 --max_fuel 60 --z3rlimit 300"
// #push-option
#endverbatim

procedure timeoutBet()
   {:public}
    lets
        casino_state' := 0;
        timeout' := 1;
        pot' := 2;
        operator_address' := 3;
        wager_value' := 5;
        wager_timestamp' := 7;
        player_address' := 8;
        contract_address' := 10;

        idle' := 0;
        bet_placed' := 2;

        price := stor[wager_value'] * 2;
        receiver_address := stor[player_address'] % pow2_160;
        sender_address := stor[contract_address'] % pow2_160;
    reads
        hdStkZero;
        sender;
        timeStamp;
        actor;
    modifies
        return_data;
        stack; 
        stor;
        bal;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1018;        
        // invariants
        status == ACTIVE ==> ( 
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160  &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
    ensures
        old(status == ACTIVE && (stor[casino_state'] == bet_placed' && sender == stor[player_address'] &&
         timeStamp - stor[wager_timestamp'] > stor[timeout'] && bal[receiver_address] + price < pow2_256)) ==> (
            stack ^= old(stack) &&
            // return_data == old(return_data) &&
            status == old(status) &&
            stor == old(stor [pot' := #nat256(stor[pot'] - stor[wager_value'])] [wager_value' := 0] [casino_state' := idle']) &&
            bal == old(bal [sender_address := #nat256(bal[sender_address] - price)] [receiver_address := #nat256(bal[receiver_address] + price)]) &&
            // invariant
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160 &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
        old(status == ACTIVE && (stor[casino_state'] != bet_placed' || sender != stor[player_address'] ||
         timeStamp - stor[wager_timestamp'] <= stor[timeout'] || bal[receiver_address] + price >= pow2_256)) ==> (
            status == END_INVALID &&
            // stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    sload_value(player_address);
    BALANCE();

    sload_value(wager_value);
    sload_value(wager_value);
    SafeAdd();
    assert status == ACTIVE ==> stack[0] == price;
    overflowCheck();


    inState(bet_placed);

    CALLER();
    sload_value(player_address);
    EQ();

    if (hdStkZero == 1) {
        INVALID();
    } else {
        sload_value(timeout);
        sload_value(wager_timestamp);
        TIMESTAMP();
        SUB();
        GT();

        if (hdStkZero == 1) {
            INVALID();
        } else {
            timeoutBetSafe();
        }
    }
}

#verbatim
#restart-solver
#push-options "--initial_fuel 60 --initial_ifuel 60 --max_fuel 60 --z3rlimit 300"
#endverbatim

procedure addToPot(inline _value:nat256)
    {:public}
    lets 
        casino_state' := 0;
        pot' := 2;
        operator_address' := 3;
        wager_value' := 5;
        wager_timestamp' := 7;
        player_address' := 8;
        contract_address' := 10;

        bet_placed' := 2;

        receiver_address := stor[contract_address'] % pow2_160;
        new_sender_balance:nat256 := if _value < bal[sender % pow2_160] then #nat256(bal[sender % pow2_160] - _value) else 0;
    reads
        hdStkZero;
        sender;
        value;
        actor;
        timeStamp;
    modifies
        return_data;
        stack; 
        stor;
        bal;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1022;
        // status == ACTIVE ==> bal[receiver_address] + value < pow2_256;
        // status == ACTIVE ==> stor[pot'] + _value < pow2_256;

        // Must be true after a successful call of this function
        status == ACTIVE ==> _value <= bal[sender % pow2_160];
        // invariants
        status == ACTIVE ==> ( 
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160  &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
    ensures
        old(status == ACTIVE && (value == _value && sender == stor[operator_address'] && _value > 0 &&
         bal[receiver_address] + value < pow2_256 && stor[pot'] + _value < pow2_256)) ==> ( 
            stack ^= old(stack) &&
            return_data == old(return_data) &&
            status == old(status) &&
            stor == old(stor[pot' := #nat256(stor[pot'] + _value)]) &&
            bal == old(bal[sender % pow2_160 := new_sender_balance][receiver_address := #nat256(bal[receiver_address] + value)]) &&
            // invariant
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            stor[contract_address'] == actor &&
            stor[contract_address'] != sender &&
            stor[contract_address'] != stor[operator_address'] &&
            stor[contract_address'] % pow2_160 != stor[player_address'] % pow2_160 &&
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[stor[contract_address'] % pow2_160]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[stor[contract_address'] % pow2_160])
            )
        );
        old(status == ACTIVE && (value != _value || sender != stor[operator_address'] || _value <= 0 ||
         bal[receiver_address] + value >= pow2_256 || stor[pot'] + _value >= pow2_256)) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            option_is_none(return_data)
        ); 
        inactive_state_unchanged(old(this), this);
{
    lemma_cons_tail_eq();
    
    sload_value(contract_address);
    BALANCE();
    CALLVALUE();
    overflowCheck();

    assert status == ACTIVE ==> old(bal[receiver_address] + value < pow2_256);
    assert status == ACTIVE ==> stack ^= old(stack);


    sload_value(pot);
    PUSH(_value);
    overflowCheck();

    assert status == ACTIVE ==> old(bal[receiver_address] + value < pow2_256);
    assert status == ACTIVE ==> old(stor[pot'] + _value < pow2_256);
    assert status == ACTIVE ==> stack ^= old(stack);

    byOperator();
    assert status == ACTIVE ==> old(bal[receiver_address] + value < pow2_256);
    assert status == ACTIVE ==> old(stor[pot'] + _value < pow2_256);
    assert status == ACTIVE ==> old(sender == stor[operator_address']);
    assert status == ACTIVE ==> stack ^= old(stack);

    costs(_value);
    assert status == ACTIVE ==> old(bal[receiver_address] + value < pow2_256);
    assert status == ACTIVE ==> old(stor[pot'] + _value < pow2_256);
    assert status == ACTIVE ==> old(sender == stor[operator_address']);
    assert status == ACTIVE ==> old(value == _value);
    assert status == ACTIVE ==> stack ^= old(stack);

    PUSH(0);
    PUSH(_value);
    GT();

    if (hdStkZero == 1) {
        INVALID();
    }

    assert status == ACTIVE ==> old(bal[receiver_address] + value < pow2_256);
    assert status == ACTIVE ==> old(stor[pot'] + _value < pow2_256);
    assert status == ACTIVE ==> old(sender == stor[operator_address']);
    assert status == ACTIVE ==> old(value == _value);
    assert status == ACTIVE ==> old(_value > 0);

    assert status == ACTIVE ==> stack ^= old(stack);

    addToPotSafe(_value);

}


