include "../../EVM.Vale.Ins_Basic.vaf"
include "../../EVM.Vale.Common.vaf"
include "EVM.Vale.Coin_safe.vaf"
include "../EVM.Vale.Overflow.vaf"

module EVM.Vale.Coin

#verbatim{:interface}{:implementation}
open FStar.Seq 
open FStar.Seq.Base
open FStar.Seq.Properties
open EVM.Machine_Basic
open EVM.Vale.Decls
open EVM.Vale.Ins_Basic
open EVM.Vale.Tools
open EVM.Vale.Coin_dep
open EVM.Vale.Coin_safe
open EVM.Vale.Common
open EVM.State
open EVM.Vale.Overflow
#endverbatim

#verbatim{:implementation}
friend EVM.Vale.Decls 
#endverbatim

#token :: precedence + 
#token ^= precedence = 
#token \ precedence *

procedure CoinConstructor(inline _contract_address:address)
    {:public}
    lets
        contract_address' := 0;
        minter_address' := 1;
    reads
        sender;
        status;
    modifies
        stack; 
        stor;
    requires
        status == ACTIVE ==> len(stack) < 1023;
    ensures
        old(status) == ACTIVE ==>  stack ^= old(stack);
        old(status) == ACTIVE ==>  stor == old(stor[contract_address' := _contract_address] [minter_address := sender]);
        inactive_state_unchanged(old(this), this);
{
    sstore_value(contract_address, _contract_address);
    sstore_caller(minter_address);
}


#verbatim
#restart-solver
#push-options "--initial_fuel 2 --initial_ifuel 2 --max_fuel 2 --z3rlimit 300"
#endverbatim
procedure mint(inline receiver_address:address, inline amount:nat256)
    {:public}
    lets
        contract_address' := 0;
        minter_address' := 1;     
        offset' := 7;   
    reads
        sender;
        hdStkZero;
    modifies
        return_data;
        stack; 
        stor;
        status;
    requires
        status == ACTIVE ==> len(old(stack)) < 1022;
    ensures
        old(status == ACTIVE && sender == stor[minter_address'] && stor[#nat256(receiver_address + offset')] + amount < pow2_256) ==> (
            stack ^= old(stack) &&
            stor == old(stor[#nat256(receiver_address + offset') := #nat256(stor[#nat256(receiver_address + offset')] + amount)]) &&
            return_data == old(return_data) &&
            status == old(status)
        );
        old(status == ACTIVE && (sender != stor[minter_address'] || stor[#nat256(receiver_address + offset')] + amount >= pow2_256)) ==> (
            status == END_INVALID &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    Add_two_values(receiver_address, offset);
    SLOAD();
    PUSH(amount);
    overflowCheck();

    assert status == ACTIVE ==> old(stor[#nat256(receiver_address + offset')] + amount < pow2_256) && stor == old(stor) && stack ^= old(stack);

    CALLER();
    sload_value(minter_address);
    EQ();
    if (hdStkZero == 1) {
        INVALID();
    } else {
        mintSafe(receiver_address, amount);
    }

}


#verbatim
#restart-solver
#push-options "--initial_fuel 60 --initial_ifuel 60 --max_fuel 60 --z3rlimit 300"
#endverbatim

// #verbatim{:interface}
// let empty_seq ():(seq nat256) = create 0 0
// #endverbatim
// function empty_seq():seq(nat256) extern;
procedure send(inline receiver_address:address, inline amount:nat256)
    {:public}
    lets
        contract_address' := 0;
        minter_address' := 1;     
        offset' := 7;  
        insufficientBalanceError' := 0;
        sender_address:nat256 := if sender + offset' < pow2_256 then #nat256(sender + offset') else 0;
        new_sender_balance:= if amount <= stor[sender_address] then #nat256(stor[sender_address] - amount) else 0; 
        midpoint_stor := old(stor [sender_address := new_sender_balance]);
    reads
        sender;
        hdStkZero;
    modifies
        return_data;
        stack; 
        stor;
        mem;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1022;
    ensures
        old(status == ACTIVE && amount <= stor[sender_address] && stor[#nat256(receiver_address + offset')] + amount < pow2_256) ==> (
            stack ^= old(stack) &&
            stor == midpoint_stor[#nat256(receiver_address + offset') := #nat256(midpoint_stor[#nat256(receiver_address + offset')] + amount)] &&
            return_data == old(return_data) &&
            mem == old(mem) &&
            status == old(status)
        );
        old(status == ACTIVE && (amount > stor[sender_address] || stor[#nat256(receiver_address + offset')] + amount >= pow2_256)) ==> (
            status == END_INVALID &&
            stack ^= old(stack) &&
            (old(amount > stor[sender_address]) ==> 
             option_some_eq(return_data, slice(mem[0 := insufficientBalanceError'][1 := amount][2 := stor[sender_address]], 0, 3)))
            // option_some_eq(return_data, cons(insufficientBalanceError', cons(amount, cons(load_stor(sender + offset' , old(stor)), empty_seq()))))
        );
        inactive_state_unchanged(old(this), this);
{
    
    CALLER();
    Add_value(offset);
    SLOAD();
    PUSH(amount);
    GT();

    if (hdStkZero == 0) {
        insufficientBalance(amount);
        assert old(status == ACTIVE) ==>  old(amount > stor[sender_address]) ==> 
             option_some_eq(return_data, slice(mem[0 := insufficientBalanceError'][1 := amount][2 := stor[sender_address]], 0, 3));
    } 

    Add_two_values(offset, receiver_address);
    SLOAD();
    PUSH(amount);
    overflowCheck();

    assert old(status == ACTIVE && (amount > stor[sender_address] || stor[#nat256(receiver_address + offset')] + amount >= pow2_256)) ==> (
        status == END_INVALID &&
        stack ^= old(stack) 
    );

     assert old(status == ACTIVE && (amount > stor[sender_address] || stor[#nat256(receiver_address + offset')] + amount >= pow2_256)) ==> (
        old(amount > stor[sender_address]) ==> 
             option_some_eq(return_data, slice(mem[0 := insufficientBalanceError'][1 := amount][2 := stor[sender_address]], 0, 3))
    );
    sendSafe(receiver_address, amount);
}