include "../../EVM.Vale.Common.vaf"
include "../../EVM.Vale.Ins_Basic.vaf"
include "EVM.Vale.Casino_safe.vaf"
include "../../SafeMath.vaf"
include "../EVM.Vale.Overflow.vaf"


module EVM.Vale.Casino3

#verbatim{:interface}{:implementation}
open FStar.Seq 
open FStar.Seq.Base
open FStar.Seq.Properties
open EVM.Machine_Basic
open EVM.Vale.Decls
open EVM.Vale.Ins_Basic
open EVM.Vale.Tools
open EVM.Vale.Casino_dep
open EVM.Vale.Casino_safe
open EVM.Vale.Common
open EVM.Vale.Overflow
open EVM.State
open SafeMath
#endverbatim

#verbatim{:implementation}
friend EVM.Vale.Decls 
#endverbatim

#token :: precedence + 
#token ^= precedence = 
#token \ precedence *

#verbatim
#restart-solver
#push-options "--initial_fuel 60 --initial_ifuel 60 --max_fuel 60 --z3rlimit 300"
#endverbatim

procedure timeoutBet()
   {:public}
    lets
        casino_state' := 0;
        timeout' := 1;
        pot' := 2;
        operator_address' := 3;
        wager_value' := 5;
        wager_timestamp' := 7;
        player_address' := 8;

        idle' := 0;
        bet_placed' := 2;

        price := stor[wager_value'] * 2;
        receiver_address := stor[player_address'] % pow2_160;
        sender_address := actor;
    reads
        hdStkZero;
        sender;
        timeStamp;
        actor;
    modifies
        return_data;
        stack; 
        stor;
        bal;
        status;
    requires
        status == ACTIVE ==> len(stack) < 1018;        
        // invariants
        status == ACTIVE ==> ( 
            0 <= stor[casino_state'] <= 2 &&
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            actor != sender &&
            actor != stor[operator_address'] &&
            actor != stor[player_address'] % pow2_160 &&
            
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[actor]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[actor])
            )
        );
    ensures
        old(status == ACTIVE && (stor[casino_state'] == bet_placed' && sender == stor[player_address'] &&
         timeStamp - stor[wager_timestamp'] > stor[timeout'] && bal[receiver_address] + price < pow2_256)) ==> (
            stack ^= old(stack) &&
            // return_data == old(return_data) &&
            status == old(status) &&
            stor == old(stor [pot' := #nat256(stor[pot'] - stor[wager_value'])] [wager_value' := 0] [casino_state' := idle']) &&
            bal == old(bal [sender_address := #nat256(bal[sender_address] - price)] [receiver_address := #nat256(bal[receiver_address] + price)]) &&
            // invariant
            0 <= stor[casino_state'] <= 2 &&
            (stor[casino_state'] == bet_placed' ==> stor[wager_value'] <= stor[pot']) &&
            stor[wager_timestamp'] <= timeStamp &&
            actor != sender &&
            actor != stor[operator_address'] &&
            actor != stor[player_address'] % pow2_160 &&
            
            (
                (stor[casino_state']  == bet_placed' ==> 
                stor[pot'] + stor[wager_value'] == bal[actor]) &&
                (stor[casino_state']  != bet_placed' ==> stor[pot'] == bal[actor])
            )
        );
        old(status == ACTIVE && (stor[casino_state'] != bet_placed' || sender != stor[player_address'] ||
         timeStamp - stor[wager_timestamp'] <= stor[timeout'] || bal[receiver_address] + price >= pow2_256)) ==> (
            status == END_INVALID &&
            // stack ^= old(stack) &&
            option_is_none(return_data)
        );
        inactive_state_unchanged(old(this), this);
{
    sload_value(player_address);
    BALANCE();

    sload_value(wager_value);
    sload_value(wager_value);
    SafeAdd();
    assert status == ACTIVE ==> stack[0] == price;
    overflowCheck();


    inState(bet_placed);

    CALLER();
    sload_value(player_address);
    EQ();

    if (hdStkZero == 1) {
        INVALID();
    } else {
        sload_value(timeout);
        sload_value(wager_timestamp);
        TIMESTAMP();
        SUB();
        GT();

        if (hdStkZero == 1) {
            INVALID();
        } else {
            timeoutBetSafe();
        }
    }
}